{"version":3,"sources":["pages/turnips/components/Chart/index.tsx","pages/turnips/components/TurnipGraph.tsx","pages/turnips/page.tsx"],"names":["Chart","props","chart","chartElement","exportChart","bind","destroyChart","loadData","redraw","setChart","setChartElementRef","unloadData","updateConfig","this","updateChart","nextProps","isPure","a","b","aKeys","Object","keys","bKeys","length","index","key","shallowEqual","destroy","mimeType","onExported","undefined","console","error","export","preserveAspectRatio","data","load","flush","config","className","domProps","style","unloadBeforeLoad","bb","generate","bindto","element","unload","dataToLoad","name","value","ref","React","Component","displayName","getInstances","instance","patternNames","Pattern","FLUCTUATING","LARGE_SPIKE","DECREASING","SMALL_SPIKE","AGGREGATE","UNKNOWN","TurnipGraph","theme","useTheme","t","useTranslation","result","useMemo","dataMakesSense","calculate","columns","day","colours","names","n","pattern","column","hours","hour","push","low","min","high","max","mid","avg","patternChance","chance","patternColours","Card","margin","CardContent","x","colors","type","areaSplineRange","legend","show","axis","tick","rotate","multiline","tooltip","weekDays","Turnips","foundData","getDefault","window","localStorage","turnips","clone","emptyWeek","useState","setDataImpl","confirmOpen","setConfirmOpen","dontAsk","setDontAsk","makesSense","setData","newData","toSet","deepmerge","JSON","stringify","reset","previousPattern","knownPattern","isXs","useMediaQuery","breakpoints","up","firstBuy","Grid","item","xs","sm","FormControlLabel","control","Checkbox","checked","onChange","event","target","color","label","title","Helmet","pageTitle","maxWidth","CardHeader","container","spacing","TextField","fullWidth","buy","map","am","pm","FormControl","InputLabel","id","Select","labelId","MenuItem","Button","height","variant","onClick","turnipDontConfirm","display","justifyContent","palette","main","paddingRight","Warning","Typography","fallback","Dialog","open","DialogTitle","DialogContent","DialogActions"],"mappings":"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","file":"static/js/6.d3eb6662.chunk.js","sourcesContent":["import {\n    ArrayOrString, bb, Chart as BBChart, Data, PrimitiveArray\n} from 'billboard.js';\nimport 'billboard.js/dist/billboard.css';\nimport React from 'react';\nimport { Dict } from '../../../../misc';\nimport './dark.scss';\nimport { ChartProps } from './types';\n// lifted from react-billboardjs and modified to work in typescript\n/* MIT License\n\nCopyright (c) 2017 Tony Quetano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. */\nfunction shallowEqual(a: Dict<any>, b: Dict<any>) {\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    const length = aKeys.length;\n\n    if (length !== bKeys.length) {\n        return false;\n    }\n\n    let index = -1;\n\n    while (++index < length) {\n        const key = aKeys[index];\n\n        if (key !== bKeys[index] || a[key] !== b[key]) {\n            return false;\n        }\n    }\n\n    return true;\n}\nclass Chart extends React.Component<ChartProps> {\n    static displayName = 'Chart';\n    chart: BBChart | null;\n    chartElement: HTMLDivElement | null;\n\n    static getInstances = () => {\n        return bb.instance;\n    };\n\n    constructor(props: ChartProps) {\n        super(props);\n\n        this.chart = null;\n        this.chartElement = null;\n\n        // Explicit binds instead of arrow functions for lower memory footprint.\n        this.exportChart = this.exportChart.bind(this);\n        this.destroyChart = this.destroyChart.bind(this);\n        this.loadData = this.loadData.bind(this);\n        this.redraw = this.redraw.bind(this);\n        this.setChart = this.setChart.bind(this);\n        this.setChartElementRef = this.setChartElementRef.bind(this);\n        this.unloadData = this.unloadData.bind(this);\n        this.updateConfig = this.updateConfig.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateChart();\n    }\n\n    shouldComponentUpdate(nextProps: ChartProps) {\n        return !nextProps.isPure || !shallowEqual(this.props, nextProps);\n    }\n\n    componentDidUpdate() {\n        this.updateChart();\n    }\n\n    componentWillUnmount() {\n        this.destroyChart();\n    }\n\n    destroyChart() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n\n        this.chart = null;\n    }\n\n    exportChart(mimeType: string, onExported: ((dataUrl: string) => string) | undefined = undefined) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error('No chart is available to export.');\n        }\n\n        this.chart.export({ mimeType, preserveAspectRatio: true }, onExported);\n    }\n\n    loadData(data: Data) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'No chart is available to which data can be loaded. It may already have been destroyed, or has never been drawn.',\n            );\n        }\n\n        this.chart.load(data as {\n            url?: string;\n            json?: [{ [key: string]: string }];\n            rows?: PrimitiveArray[];\n            columns?: PrimitiveArray[];\n            data?: Array<{ [key: string]: number }>;\n            names?: { [key: string]: string };\n            xs?: { [key: string]: string };\n            classes?: { [key: string]: string };\n            categories?: string[];\n            axes?: { [key: string]: string | string[] };\n            colors?: { [key: string]: string };\n            headers?: { [key: string]: string };\n            keys?: { [key: string]: string };\n            mimeType?: string;\n            type?: string;\n            types?: { [key: string]: string };\n            unload?: boolean | ArrayOrString;\n            done?: () => any;\n        });\n    }\n\n    redraw() {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error('No chart is available to draw.');\n        }\n\n        this.chart.flush();\n    }\n\n    setChart(data: Data) {\n        if (this.chart) {\n            this.loadData(data);\n        } else {\n            const {\n                className: classNameIgnored,\n                domProps: domPropsIgnored,\n                isPure: isPureIgnored,\n                style: styleIgnored,\n                unloadBeforeLoad: unloadBeforeLoadIgnored,\n                ...config\n            } = this.props;\n\n            this.chart = bb.generate({\n                bindto: this.chartElement,\n                ...config,\n            });\n        }\n    }\n\n    setChartElementRef(element: HTMLDivElement) {\n        this.chartElement = element;\n    }\n\n    unloadData(data: any) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'No chart is available from which data can be unloaded. It may already have been destroyed, or has never been drawn.',\n            );\n        }\n\n        this.chart.unload(data);\n    }\n\n    updateChart() {\n        const { data, unloadBeforeLoad } = this.props;\n        const dataToLoad = unloadBeforeLoad ? { ...data, unload: true } : data;\n\n        this.setChart(dataToLoad);\n    }\n\n    updateConfig(name: string, value: any, redraw: boolean | undefined) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'You are trying to set the config a chart that does not exist.' +\n                'Have you passed `data`?',\n            );\n        }\n\n        return this.chart.config(name, value, redraw);\n    }\n\n    render() {\n        const { className, domProps, style } = this.props;\n\n        return (\n            <div\n                className={className}\n                style={style}\n                {...domProps}\n                ref={this.setChartElementRef}\n            />\n        );\n    }\n}\nexport default Chart;\n","import { Card, CardContent, useTheme } from \"@material-ui/core\";\nimport { areaSplineRange } from 'billboard.js';\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Chart } from '.';\nimport { Dict } from \"../../../misc\";\nimport { calculate, dataMakesSense, Pattern, patternColours, UserTurnipsData } from \"../data\";\n\n\nconst patternNames = {\n    [Pattern.FLUCTUATING]: \"turnips:graph.fluctuating\",\n    [Pattern.LARGE_SPIKE]: \"turnips:graph.large_spike\",\n    [Pattern.DECREASING]: \"turnips:graph.decreasing\",\n    [Pattern.SMALL_SPIKE]: \"turnips:graph.small_spike\",\n    [Pattern.AGGREGATE]: \"turnips:graph.aggregate\",\n    [Pattern.UNKNOWN]: \"Something went wrong. Sorry.\",\n}\n\nexport default function TurnipGraph({ data }: { data: UserTurnipsData }) {\n    const theme = useTheme();\n    const { t } = useTranslation(['core', 'turnips']);\n    const result = React.useMemo(\n        () => dataMakesSense(data) ? calculate(data) : [],\n        [data]\n    );\n    if (!result.length) {\n        return null;\n    }\n    let columns: [string, ...{ high: number, low: number, mid: number }[]][] = [\n        [\n            \"x\",\n            t('turnips:graph.buy'),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.mon.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.mon.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.tue.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.tue.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.wed.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.wed.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.thu.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.thu.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.fri.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.fri.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.sat.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.sat.short`) }),\n        ] as any\n    ];\n    let colours: Dict<string> = {}\n    let names: Dict<string> = {}\n    let n = 0;\n    for (let pattern of result) {\n        let column: [string, ...{ high: number, low: number, mid: number }[]] = [`data${n}`];\n        for (let hour of pattern.hours) {\n            column.push({ low: hour.min, high: hour.max, mid: hour.avg });\n        }\n        columns.push(column);\n        names[`data${n}`] = t(patternNames[pattern.pattern], { patternChance: pattern.chance * 100 });\n        colours[`data${n++}`] = patternColours[theme.name][pattern.pattern](pattern.chance);\n    }\n    return <Card style={{ margin: 16 }}>\n        <CardContent>\n            <Chart\n                key={theme.name} // this is very hacky but if I don't do it switching theme completely breaks the graph\n                isPure\n                className={`chart ${theme.name}`}\n                data={{\n                    x: 'x',\n                    columns: columns as any,\n                    colors: colours,\n                    names,\n                    type: areaSplineRange(),\n                }}\n                legend={{\n                    // position: 'right',\n                    show: false\n                }}\n                axis={{\n                    x: {\n                        type: 'category',\n                        tick: {\n                            rotate: 90,\n                            multiline: false,\n                            tooltip: true,\n                        },\n                    }\n                }}\n            />\n        </CardContent>\n    </Card>;\n}","import { Button, Card, CardContent, CardHeader, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, FormControlLabel, Grid, InputLabel, MenuItem, Select, TextField, Typography, useMediaQuery, useTheme } from \"@material-ui/core\";\nimport { Warning } from \"@material-ui/icons\";\nimport deepmerge from \"deepmerge\";\nimport React, { Suspense } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport { Centred, Loading } from '../../components';\nimport { clone, DeepPartial, getDefault } from \"../../misc\";\nimport { TurnipGraph } from \"./components\";\nimport { dataMakesSense, emptyWeek, knownPattern, Pattern, UserTurnipsData } from \"./data\";\n\nconst weekDays: ('mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat')[] = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\nexport default function Turnips() {\n    const foundData = getDefault(window.localStorage.turnips, clone(emptyWeek));\n    const [data, setDataImpl] = React.useState(foundData);\n    const [confirmOpen, setConfirmOpen] = React.useState(false);\n    const [dontAsk, setDontAsk] = React.useState(false);\n    const makesSense = dataMakesSense(data);\n    function confirm() {\n        if (dontAsk) {\n            window.localStorage.turnipDontConfirm = 'true';\n        }\n        setConfirmOpen(false);\n        reset();\n    }\n    function setData(newData: DeepPartial<UserTurnipsData>) {\n        let toSet: UserTurnipsData = deepmerge<UserTurnipsData>(data, newData as Partial<UserTurnipsData>);\n        window.localStorage.turnips = JSON.stringify(toSet);\n        setDataImpl(toSet);\n    }\n    function nextWeek() {\n        if (getDefault<boolean>(window.localStorage.turnipDontConfirm, false)) {\n            reset();\n        } else {\n            setConfirmOpen(true);\n        }\n    }\n    function reset() {\n        let newData = clone(emptyWeek);\n        newData.previousPattern = knownPattern(data);\n        setData(newData);\n    }\n    const { t } = useTranslation(['core', 'turnips']);\n    const theme = useTheme();\n    const isXs = !useMediaQuery(theme.breakpoints.up('sm'));\n    const firstBuy = <Grid item xs={12} sm={6}>\n        <Centred>\n            <FormControlLabel\n                control={\n                    <Checkbox\n                        checked={data.firstBuy}\n                        onChange={(event) => setData({ firstBuy: event.target.checked })}\n                        color=\"primary\"\n                    />\n                }\n                label={t('turnips:prices.first_buy.checkbox')}\n                title={t('turnips:prices.first_buy.hover')}\n            />\n        </Centred>\n    </Grid>;\n    return <>\n        <Helmet>\n            <title>{t('core:title.browser.page', { pageTitle: t('core:pages.turnips') })}</title>\n        </Helmet>\n        <div style={{ maxWidth: 800, margin: 'auto' }}>\n            <Card style={{ margin: 16 }}>\n                <CardHeader title={t('turnips:prices.title')} />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        {isXs && firstBuy}\n                        <Grid item xs={12} sm={6}>\n                            <TextField type=\"number\" fullWidth value={data.buy} onChange={(event) => setData({ buy: event.target.value ? +event.target.value : null })} label={t('turnips:prices.buy')} />\n                        </Grid>\n                        {!isXs && firstBuy}\n                        {weekDays.map((day) => (\n                            <>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField type=\"number\" fullWidth value={data[day].am} onChange={(event) => setData({ [day]: { am: event.target.value ? +event.target.value : null } })} label={t('core:time.meridian.am.long_day', { day: t(`core:time.weekday.${day}.long`) })} />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField type=\"number\" fullWidth value={data[day].pm} onChange={(event) => setData({ [day]: { pm: event.target.value ? +event.target.value : null } })} label={t('core:time.meridian.pm.long_day', { day: t(`core:time.weekday.${day}.long`) })} />\n                                </Grid>\n                            </>\n                        ))}\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth>\n                                <InputLabel id=\"comp-label\">{t('turnips:pattern.label')}</InputLabel>\n                                <Select\n                                    value={data.previousPattern}\n                                    onChange={(event) => setData(\n                                        { previousPattern: event.target.value as Pattern }\n                                    )}\n                                    labelId='pattern-label'\n                                    fullWidth\n                                >\n                                    <MenuItem value={Pattern.SMALL_SPIKE}>{t('turnips:pattern.small_spike')}</MenuItem>\n                                    <MenuItem value={Pattern.LARGE_SPIKE}>{t('turnips:pattern.large_spike')}</MenuItem>\n                                    <MenuItem value={Pattern.FLUCTUATING}>{t('turnips:pattern.fluctuating')}</MenuItem>\n                                    <MenuItem value={Pattern.DECREASING}>{t('turnips:pattern.decreasing')}</MenuItem>\n                                    <MenuItem value={Pattern.UNKNOWN}>{t('turnips:pattern.unknown')}</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <Button style={{ height: '100%' }} fullWidth variant=\"contained\" color=\"primary\" onClick={nextWeek}>{t('turnips:ui.start_next')}</Button>\n                        </Grid>\n                    </Grid>\n                    {makesSense || <>\n                        <br />\n                        <Centred>\n                            <div\n                                style={{\n                                    display: 'inline-flex',\n                                    justifyContent: 'center',\n                                    height: '100%',\n                                    color: theme.palette.error.main,\n                                    paddingRight: 8\n                                }}\n                            >\n                                <Warning />\n                            </div>\n                            <Typography color=\"error\">{t('turnips:ui.bad_data')}</Typography>\n                        </Centred>\n                    </>\n                    }\n                </CardContent>\n            </Card>\n            <Suspense fallback={<Loading />}>\n                <TurnipGraph data={data} />\n            </Suspense>\n        </div>\n        <Dialog open={confirmOpen}>\n            <DialogTitle>{t('turnips:ui.reset_dialogue.title')}</DialogTitle>\n            <DialogContent>\n                {t('turnips:ui.reset_dialogue.text')}\n                <br />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={dontAsk}\n                            onChange={(event) => setDontAsk(event.target.checked)}\n                            color=\"primary\"\n                        />\n                    }\n                    label={t('core:ui.dont_ask')}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => setConfirmOpen(false)}>\n                    {t('core:ui.cancel')}\n                </Button>\n                <Button onClick={confirm}>\n                    {t('core:ui.confirm')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    </>;\n}"],"sourceRoot":""}