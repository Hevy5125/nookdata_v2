{"version":3,"sources":["pages/turnips/components/Chart/index.tsx","pages/turnips/page.tsx"],"names":["Chart","props","chart","chartElement","exportChart","bind","destroyChart","loadData","redraw","setChart","setChartElementRef","unloadData","updateConfig","this","updateChart","nextProps","isPure","a","b","aKeys","Object","keys","bKeys","length","index","key","shallowEqual","destroy","mimeType","onExported","undefined","console","error","export","preserveAspectRatio","data","load","flush","config","className","domProps","style","unloadBeforeLoad","bb","generate","bindto","element","unload","dataToLoad","name","value","ref","React","Component","displayName","getInstances","instance","patternNames","Pattern","FLUCTUATING","LARGE_SPIKE","DECREASING","SMALL_SPIKE","AGGREGATE","UNKNOWN","weekDays","Turnips","foundData","getDefault","window","localStorage","turnips","clone","emptyWeek","useState","setDataImpl","confirmOpen","setConfirmOpen","dontAsk","setDontAsk","makesSense","dataMakesSense","setData","newData","toSet","deepmerge","JSON","stringify","reset","previousPattern","knownPattern","graph","t","useTranslation","theme","useTheme","isXs","useMediaQuery","breakpoints","up","firstBuy","Grid","item","xs","sm","Tooltip","title","FormControlLabel","control","Checkbox","checked","onChange","event","target","color","label","result","useMemo","calculate","xValues","day","columns","colours","names","n","pattern","column","hours","hour","push","low","min","high","max","mid","avg","toFixed","patternChance","chance","patternColours","Card","margin","CardContent","colors","type","areaSplineRange","legend","show","axis","x","tick","format","values","range","count","rotate","multiline","tooltip","culling","display","flexDirection","map","backgroundColor","light","dark","CardHeader","fsum","filter","Helmet","pageTitle","maxWidth","container","spacing","TextField","fullWidth","buy","am","pm","FormControl","InputLabel","id","Select","labelId","MenuItem","Button","height","variant","onClick","turnipDontConfirm","justifyContent","palette","main","paddingRight","Warning","Typography","Dialog","open","DialogTitle","DialogContent","DialogActions"],"mappings":"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","file":"static/js/6.d5566a99.chunk.js","sourcesContent":["import {\n    ArrayOrString, bb, Chart as BBChart, Data, PrimitiveArray\n} from 'billboard.js';\nimport 'billboard.js/dist/billboard.css';\nimport React from 'react';\nimport { Dict } from '../../../../misc';\nimport './dark.scss';\nimport { ChartProps } from './types';\n// lifted from react-billboardjs and modified to work in typescript\n/* MIT License\n\nCopyright (c) 2017 Tony Quetano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. */\nfunction shallowEqual(a: Dict<any>, b: Dict<any>) {\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    const length = aKeys.length;\n\n    if (length !== bKeys.length) {\n        return false;\n    }\n\n    let index = -1;\n\n    while (++index < length) {\n        const key = aKeys[index];\n\n        if (key !== bKeys[index] || a[key] !== b[key]) {\n            return false;\n        }\n    }\n\n    return true;\n}\nclass Chart extends React.Component<ChartProps> {\n    static displayName = 'Chart';\n    chart: BBChart | null;\n    chartElement: HTMLDivElement | null;\n\n    static getInstances = () => {\n        return bb.instance;\n    };\n\n    constructor(props: ChartProps) {\n        super(props);\n\n        this.chart = null;\n        this.chartElement = null;\n\n        // Explicit binds instead of arrow functions for lower memory footprint.\n        this.exportChart = this.exportChart.bind(this);\n        this.destroyChart = this.destroyChart.bind(this);\n        this.loadData = this.loadData.bind(this);\n        this.redraw = this.redraw.bind(this);\n        this.setChart = this.setChart.bind(this);\n        this.setChartElementRef = this.setChartElementRef.bind(this);\n        this.unloadData = this.unloadData.bind(this);\n        this.updateConfig = this.updateConfig.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateChart();\n    }\n\n    shouldComponentUpdate(nextProps: ChartProps) {\n        return !nextProps.isPure || !shallowEqual(this.props, nextProps);\n    }\n\n    componentDidUpdate() {\n        this.updateChart();\n    }\n\n    componentWillUnmount() {\n        this.destroyChart();\n    }\n\n    destroyChart() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n\n        this.chart = null;\n    }\n\n    exportChart(mimeType: string, onExported: ((dataUrl: string) => string) | undefined = undefined) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error('No chart is available to export.');\n        }\n\n        this.chart.export({ mimeType, preserveAspectRatio: true }, onExported);\n    }\n\n    loadData(data: Data) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'No chart is available to which data can be loaded. It may already have been destroyed, or has never been drawn.',\n            );\n        }\n\n        this.chart.load(data as {\n            url?: string;\n            json?: [{ [key: string]: string }];\n            rows?: PrimitiveArray[];\n            columns?: PrimitiveArray[];\n            data?: Array<{ [key: string]: number }>;\n            names?: { [key: string]: string };\n            xs?: { [key: string]: string };\n            classes?: { [key: string]: string };\n            categories?: string[];\n            axes?: { [key: string]: string | string[] };\n            colors?: { [key: string]: string };\n            headers?: { [key: string]: string };\n            keys?: { [key: string]: string };\n            mimeType?: string;\n            type?: string;\n            types?: { [key: string]: string };\n            unload?: boolean | ArrayOrString;\n            done?: () => any;\n        });\n    }\n\n    redraw() {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error('No chart is available to draw.');\n        }\n\n        this.chart.flush();\n    }\n\n    setChart(data: Data) {\n        if (this.chart) {\n            this.loadData(data);\n        } else {\n            const {\n                className: classNameIgnored,\n                domProps: domPropsIgnored,\n                isPure: isPureIgnored,\n                style: styleIgnored,\n                unloadBeforeLoad: unloadBeforeLoadIgnored,\n                ...config\n            } = this.props;\n\n            this.chart = bb.generate({\n                bindto: this.chartElement,\n                ...config,\n            });\n        }\n    }\n\n    setChartElementRef(element: HTMLDivElement) {\n        this.chartElement = element;\n    }\n\n    unloadData(data: any) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'No chart is available from which data can be unloaded. It may already have been destroyed, or has never been drawn.',\n            );\n        }\n\n        this.chart.unload(data);\n    }\n\n    updateChart() {\n        const { data, unloadBeforeLoad } = this.props;\n        const dataToLoad = unloadBeforeLoad ? { ...data, unload: true } : data;\n\n        this.setChart(dataToLoad);\n    }\n\n    updateConfig(name: string, value: any, redraw: boolean | undefined) {\n        if (!this.chart) {\n            // eslint-disable-next-line no-console\n            return console.error(\n                'You are trying to set the config a chart that does not exist.' +\n                'Have you passed `data`?',\n            );\n        }\n\n        return this.chart.config(name, value, redraw);\n    }\n\n    render() {\n        const { className, domProps, style } = this.props;\n\n        return (\n            <div\n                className={className}\n                style={style}\n                {...domProps}\n                ref={this.setChartElementRef}\n            />\n        );\n    }\n}\nexport default Chart;\n","import {\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Checkbox,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Tooltip,\n    Typography,\n    useMediaQuery,\n    useTheme\n} from \"@material-ui/core\";\nimport { Warning } from \"@material-ui/icons\";\nimport { areaSplineRange } from 'billboard.js';\nimport deepmerge from \"deepmerge\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport { Centred } from '../../components';\nimport { clone, DeepPartial, Dict, fsum, getDefault, range } from \"../../misc\";\nimport { Chart } from './components';\nimport { calculate, dataMakesSense, emptyWeek, knownPattern, Pattern, patternColours, UserTurnipsData } from \"./data\";\n\nconst patternNames = {\n    [Pattern.FLUCTUATING]: \"turnips:graph.fluctuating\",\n    [Pattern.LARGE_SPIKE]: \"turnips:graph.large_spike\",\n    [Pattern.DECREASING]: \"turnips:graph.decreasing\",\n    [Pattern.SMALL_SPIKE]: \"turnips:graph.small_spike\",\n    [Pattern.AGGREGATE]: \"turnips:graph.aggregate\",\n    [Pattern.UNKNOWN]: \"Something went wrong. Sorry.\",\n}\n\nconst weekDays: ('mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat')[] = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n\nexport default function Turnips() {\n    const foundData = getDefault(window.localStorage.turnips, clone(emptyWeek));\n    const [data, setDataImpl] = React.useState(foundData);\n    const [confirmOpen, setConfirmOpen] = React.useState(false);\n    const [dontAsk, setDontAsk] = React.useState(false);\n    let makesSense = dataMakesSense(data);\n    function confirm() {\n        if (dontAsk) {\n            window.localStorage.turnipDontConfirm = 'true';\n        }\n        setConfirmOpen(false);\n        reset();\n    }\n    function setData(newData: DeepPartial<UserTurnipsData>) {\n        let toSet: UserTurnipsData = deepmerge<UserTurnipsData>(data, newData as Partial<UserTurnipsData>);\n        window.localStorage.turnips = JSON.stringify(toSet);\n        setDataImpl(toSet);\n    }\n    function nextWeek() {\n        if (getDefault<boolean>(window.localStorage.turnipDontConfirm, false)) {\n            reset();\n        } else {\n            setConfirmOpen(true);\n        }\n    }\n    function reset() {\n        let newData = clone(emptyWeek);\n        newData.previousPattern = knownPattern(data);\n        setData(newData);\n    }\n    const { t } = useTranslation(['core', 'turnips']);\n    const theme = useTheme();\n    const isXs = !useMediaQuery(theme.breakpoints.up('sm'));\n    const firstBuy = <Grid item xs={12} sm={6}>\n        <Centred>\n            <Tooltip\n                title={t('turnips:prices.first_buy.hover') as string}\n            >\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={data.firstBuy}\n                            onChange={(event) => setData({ firstBuy: event.target.checked })}\n                            color=\"primary\"\n                        />\n                    }\n                    label={t('turnips:prices.first_buy.checkbox')}\n                />\n            </Tooltip>\n        </Centred>\n    </Grid>;\n    const result = React.useMemo(\n        () => dataMakesSense(data) ? calculate(data) : [],\n        [data]\n    );\n    let graph;\n    if (result.length) {\n        let xValues = [\n            t('turnips:graph.buy'),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.mon.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.mon.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.tue.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.tue.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.wed.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.wed.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.thu.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.thu.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.fri.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.fri.short`) }),\n            t('core:time.meridian.am.short_day', { day: t(`core:time.weekday.sat.short`) }),\n            t('core:time.meridian.pm.short_day', { day: t(`core:time.weekday.sat.short`) }),\n        ];\n        let columns: [string, ...{ high: number, low: number, mid: string }[]][] = [\n        ];\n        let colours: Dict<string> = {}\n        let names: Dict<string> = {}\n        let n = 0;\n        for (let pattern of result) {\n            let column: [string, ...{ high: number, low: number, mid: string }[]] = [`data${n}`];\n            for (let hour of pattern.hours) {\n                column.push({ low: hour.min, high: hour.max, mid: hour.avg.toFixed(2) });\n            }\n            columns.push(column);\n            names[`data${n}`] = t(patternNames[pattern.pattern], { patternChance: (pattern.chance * 100).toFixed(2) });\n            colours[`data${n++}`] = patternColours[theme.name][pattern.pattern](pattern.chance);\n        }\n        graph = <>\n            <Card style={{ margin: 16 }}>\n                <CardContent>\n                    <Chart\n                        key={theme.name}  // this is very hacky but if I don't do it switching theme completely breaks the graph\n                        isPure\n                        className={`chart ${theme.name}`}\n                        data={{\n                            columns: columns as any,\n                            colors: colours,\n                            names,\n                            type: areaSplineRange(),\n                        }}\n                        legend={{\n                            // position: 'right',\n                            show: false\n                        }}\n                        axis={{\n                            x: {\n                                tick: {\n                                    format: (x: number) => (xValues[x]),\n                                    values: range(13),\n                                    count: 13,\n                                    rotate: 90,\n                                    multiline: false,\n                                    tooltip: true,\n                                    culling: false,\n                                },\n                            }\n                        }}\n                    />\n                </CardContent>\n            </Card>\n            <div style={{ display: 'flex', flexDirection: 'row', margin: '0 8px 16px' }}>\n                {[Pattern.SMALL_SPIKE, Pattern.LARGE_SPIKE, Pattern.FLUCTUATING, Pattern.DECREASING].map(pattern =>\n                    <Card\n                        style={{\n                            margin: '0 8px',\n                            backgroundColor: theme.name === 'light' ? patternColours.light[pattern](1) : undefined,\n                            color: theme.name === 'light' ? undefined : patternColours.dark[pattern](1),\n                        }}\n                    >\n                        <CardHeader title={{\n                            [Pattern.SMALL_SPIKE]: t('turnips:pattern.small_spike'),\n                            [Pattern.LARGE_SPIKE]: t('turnips:pattern.large_spike'),\n                            [Pattern.FLUCTUATING]: t('turnips:pattern.fluctuating'),\n                            [Pattern.DECREASING]: t('turnips:pattern.decreasing'),\n                            [Pattern.AGGREGATE]: 'Something went wrong',\n                            [Pattern.UNKNOWN]: 'Something went wrong',\n                        }[pattern]} />\n                        <CardContent>\n                            <Centred>\n                                {(fsum(result.filter(result => result.pattern === pattern).map(result => result.chance)) * 100).toFixed(2)}%\n                        </Centred>\n                        </CardContent>\n                    </Card>\n                )}\n            </div>\n        </>;\n    } else {\n        graph = null;\n        makesSense = false;\n    }\n    return <>\n        <Helmet>\n            <title>{t('core:title.browser.page', { pageTitle: t('core:pages.turnips') })}</title>\n        </Helmet>\n        <div style={{ maxWidth: 800, margin: 'auto' }}>\n            <Card style={{ margin: 16 }}>\n                <CardHeader title={t('turnips:prices.title')} />\n                <CardContent>\n                    <Grid container spacing={1}>\n                        {isXs && firstBuy}\n                        <Grid item xs={12} sm={6}>\n                            <TextField type=\"number\" fullWidth value={data.buy ?? ''} onChange={(event) => setData({ buy: event.target.value ? +event.target.value : null })} label={t('turnips:prices.buy')} />\n                        </Grid>\n                        {!isXs && firstBuy}\n                        {weekDays.map((day) => (\n                            <>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField type=\"number\" fullWidth value={data[day].am ?? ''} onChange={(event) => setData({ [day]: { am: event.target.value ? +event.target.value : null } })} label={t('core:time.meridian.am.long_day', { day: t(`core:time.weekday.${day}.long`) })} />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField type=\"number\" fullWidth value={data[day].pm ?? ''} onChange={(event) => setData({ [day]: { pm: event.target.value ? +event.target.value : null } })} label={t('core:time.meridian.pm.long_day', { day: t(`core:time.weekday.${day}.long`) })} />\n                                </Grid>\n                            </>\n                        ))}\n                        <Grid item xs={12} sm={6}>\n                            <FormControl fullWidth>\n                                <InputLabel id=\"comp-label\">{t('turnips:pattern.label')}</InputLabel>\n                                <Select\n                                    value={data.previousPattern}\n                                    onChange={(event) => setData(\n                                        { previousPattern: event.target.value as Pattern }\n                                    )}\n                                    labelId='pattern-label'\n                                    fullWidth\n                                >\n                                    <MenuItem value={Pattern.SMALL_SPIKE}>{t('turnips:pattern.small_spike')}</MenuItem>\n                                    <MenuItem value={Pattern.LARGE_SPIKE}>{t('turnips:pattern.large_spike')}</MenuItem>\n                                    <MenuItem value={Pattern.FLUCTUATING}>{t('turnips:pattern.fluctuating')}</MenuItem>\n                                    <MenuItem value={Pattern.DECREASING}>{t('turnips:pattern.decreasing')}</MenuItem>\n                                    <MenuItem value={Pattern.UNKNOWN}>{t('turnips:pattern.unknown')}</MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12} sm={6}>\n                            <Button style={{ height: '100%' }} fullWidth variant=\"contained\" color=\"primary\" onClick={nextWeek}>{t('turnips:ui.start_next')}</Button>\n                        </Grid>\n                    </Grid>\n                    {makesSense || <>\n                        <br />\n                        <Centred>\n                            <div\n                                style={{\n                                    display: 'inline-flex',\n                                    justifyContent: 'center',\n                                    height: '100%',\n                                    color: theme.palette.error.main,\n                                    paddingRight: 8\n                                }}\n                            >\n                                <Warning />\n                            </div>\n                            <Typography color=\"error\">{t('turnips:ui.bad_data')}</Typography>\n                        </Centred>\n                    </>\n                    }\n                </CardContent>\n            </Card>\n            {graph}\n        </div>\n        <Dialog open={confirmOpen}>\n            <DialogTitle>{t('turnips:ui.reset_dialogue.title')}</DialogTitle>\n            <DialogContent>\n                {t('turnips:ui.reset_dialogue.text')}\n                <br />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={dontAsk}\n                            onChange={(event) => setDontAsk(event.target.checked)}\n                            color=\"primary\"\n                        />\n                    }\n                    label={t('core:ui.dont_ask')}\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => setConfirmOpen(false)}>\n                    {t('core:ui.cancel')}\n                </Button>\n                <Button onClick={confirm}>\n                    {t('core:ui.confirm')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    </>;\n}"],"sourceRoot":""}